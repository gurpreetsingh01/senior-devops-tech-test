name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging

permissions:
  id-token: write
  contents: read      

env:
  AWS_REGION: eu-west-1
  ECR_REPO: ecr-repo-cartrawler
  CLUSTER_NAME: eks_cluster_cartrawler
  K8S_MANIFEST_DIR: k8s/
  K8S_NAMESPACE: jenkins
  

jobs:
  checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

  lint:
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - uses: actions/checkout@v3

      - name: Lint YAML
        uses: ibiqlik/action-yamllint@v3
        continue-on-error: true

      - name: Validate K8s Manifests with kubeval
        run: |
          curl -sLO https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          tar xf kubeval-linux-amd64.tar.gz
          ./kubeval k8s/*.yaml || echo "kubeval completed with errors, but continuing..."

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3
      - name: Run Mocked Unit Tests
        run: |
          echo "Mocking unit tests..."
          exit 0

  build_and_push:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::396608773722:role/GitHubActionsEKSDeploy
          role-session-name: GitHubActions-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Test AWS Access
        run: |
            aws sts get-caller-identity
            aws ecr describe-repositories

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        id: build-image
        run: |
          IMAGE_TAG=${{ github.sha }}
          cd app
          docker build -t $ECR_REPO:$IMAGE_TAG .
          docker tag $ECR_REPO:$IMAGE_TAG ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:$IMAGE_TAG
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:$IMAGE_TAG
          echo "image=${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:$IMAGE_TAG" >> $GITHUB_ENV

      
      - name: Configure kubectl
        uses: azure/setup-kubectl@v3

        
      - name: Configure EKS access
        run: |
          aws eks update-kubeconfig \
            --region ${{ env.AWS_REGION }} \
            --name ${{ env.CLUSTER_NAME }}

       
          
      - name: Configure kubectl context
        run: |
             kubectl config set-context ${{ env.CLUSTER_NAME }} --namespace=${{ env.K8S_NAMESPACE }}
             kubectl config view --minify

      - name: Update Kubernetes manifests with image
        run: |
          find ${{ env.K8S_MANIFEST_DIR }} -name '*.yaml' -exec sed -i "s|image:.*${{ env.ECR_REPO }}.*|image: ${{ steps.build-image.outputs.image }}|g" {} \;
      
            
      - name: Deploy to EKS cluster
        run: |
             kubectl apply --validate=false -f ${{ env.K8S_MANIFEST_DIR }}
             kubectl get pods -n ${{ env.K8S_NAMESPACE }}
     